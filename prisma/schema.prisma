// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id            String       @id @default(uuid())
  clerkUserId   String       @unique
  email         String?      @unique
  name          String?
  imageUrl      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  verified      Boolean      @default(false)
  role          Role         @default(USER)
  stories       Story[]
  profile       Profile?     @relation("UserProfile")
  comments      Comment[]
  jobListings   JobListing[]
  verifiedBy    User?        @relation("UserVerification", fields: [verifiedById], references: [clerkUserId])
  verifiedById  String?
  verifications User[]       @relation("UserVerification")
}

model Profile {
  id               String            @id @default(uuid())
  firstName        String?
  lastName         String?
  fullName         String?
  imageUrl         String?
  dob              DateTime?
  phone            String?
  email            String?
  career           String?
  address          String?
  bio              String?
  advice           String?
  emergencyContact String?
  country          String?
  city             String?
  state            String?
  zip              String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation("UserProfile", fields: [userId], references: [clerkUserId], onDelete: Cascade)
  userId           String            @unique
  socialMediaLinks SocialMediaLink[]
}

model SocialMediaLink {
  id        String  @id @default(uuid())
  platform  String
  url       String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
}

model Story {
  id        String    @id @default(uuid())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobListing {
  id          String   @id @default(uuid())
  title       String
  description String
  company     String
  location    String
  salary      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}
